"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codePlugin = void 0;
const chalk_1 = require("chalk");
const analysis_1 = require("./analysis");
const validate_1 = require("./validate");
const output_format_1 = require("./format/output-format");
exports.codePlugin = {
    // We currently don't use scan/display. we will need to consolidate ecosystem plugins
    // to accept flows that act differently in the `testDependencies` step, as we have here
    async scan() {
        return null;
    },
    async display() {
        return '';
    },
    async test(paths, options) {
        var _a, _b;
        try {
            await validate_1.validateCodeTest(options);
            // Currently code supports only one path
            const path = paths[0];
            const sarifTypedResult = await analysis_1.getCodeAnalysisAndParseResults(path, options);
            const meta = output_format_1.getMeta(options, path);
            const prefix = output_format_1.getPrefix(path);
            const readableResult = output_format_1.getCodeDisplayedOutput(sarifTypedResult, meta, prefix);
            const numOfIssues = ((_b = (_a = sarifTypedResult.runs) === null || _a === void 0 ? void 0 : _a[0].results) === null || _b === void 0 ? void 0 : _b.length) || 0;
            if (numOfIssues > 0) {
                hasIssues(readableResult);
            }
            return { readableResult };
        }
        catch (error) {
            let err;
            if (error instanceof Error) {
                err = error;
            }
            else if (isCodeClientError(error)) {
                err = new Error(chalk_1.default.bold.red(error.statusText));
            }
            else if (error.code >= 400 && error.code < 500) {
                err = new Error(error.message);
            }
            else {
                err = new Error(error);
            }
            throw err;
        }
    },
};
function isCodeClientError(error) {
    return (error.hasOwnProperty('statusCode') &&
        error.hasOwnProperty('statusText') &&
        error.hasOwnProperty('apiName'));
}
function hasIssues(readableResult) {
    const err = new Error(readableResult);
    err.code = 'VULNS';
    throw err;
}
//# sourceMappingURL=index.js.map